name: Tests

on:
  push:
    branches: [ main, develop, test-github-actions ]  # Add your test branch
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        pip install pytest pytest-cov
        pip install pandas numba matplotlib joblib
        pip install -e .  # Install your package in development mode
    
    - name: Run tests
      run: |
        pytest tests/ -v --tb=short
    
    - name: Generate coverage report
      run: |
        pytest tests/ --cov=mcpower --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-without-numba:
    # Test pure Python fallback (no numba)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies without numba
      run: |
        pip install pytest pandas joblib
        pip install numpy scipy scikit-learn matplotlib
        pip install -e . --no-deps
    
    - name: Test Python fallback mode
      run: |
        # Should print "Using Python OLS" and "Using Python data generation"
        python -c "import mcpower; print('Python fallback mode working')"
        pytest tests/ -v --tb=short
        
  test-with-numba:
    # Test JIT compilation with numba
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies with numba
      run: |
        pip install pytest pandas joblib
        pip install numba  # Enable JIT compilation
        pip install numpy scipy scikit-learn matplotlib
        pip install -e .
    
    - name: Test JIT compilation mode
      run: |
        # Should print "Using JIT OLS" and "Using JIT data generation"
        python -c "import mcpower; print('JIT compilation mode working')"
        pytest tests/ -v --tb=short

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install linting tools
      run: |
        pip install flake8
    
    - name: Run flake8 (syntax errors only)
      run: flake8 mcpower --count --select=E9,F63,F7,F82 --show-source --statistics